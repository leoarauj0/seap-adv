/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import { useCallback, useState, useContext } from "react";
import { GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { api } from "../../../services/api";
import Footer from "../../components/Footer";
import styles from "./login.module.scss";
// import Logo from "../../../public/logo.svg";

import {
  Input,
  Button,
  Form,
  Checkbox,
  Modal,
  Select,
  Spin,
  Row,
  Col,
} from "antd";

import { LeftOutlined } from "@ant-design/icons";
import "antd/dist/antd.css";
import { Header } from "../../components/Header";
import onNotification from "../../components/Notificacao/Notificacao";
import { AutenticadoContext } from "../../context/AuthContext";
import FormItem from "antd/lib/form/FormItem";
import { MaskedInput } from "antd-mask-input";

export default function Login() {
  const router = useRouter();

  const [modalregistro, setModalRegistro] = useState(false);

  const [login] = Form.useForm();
  const [cadastro] = Form.useForm();
  const [form] = Form.useForm();

  const { signIn } = useContext(AutenticadoContext);

  async function onFinish({ login, senha }) {
    const data = {
      login,
      senha,
    };

    await signIn(data);
    // console.log("Success:", values);
  }

  const onFinishFailed = (errorInfo: any) => {
    console.log("Failed:", errorInfo);
  };

  // const mostraModalRegistro = () => {
  //   setModalRegistro(true);
  // };

  const Estado = [
    { nome: "Acre", sigla: "AC" },
    { nome: "Alagoas", sigla: "AL" },
    { nome: "Amapá", sigla: "AP" },
    { nome: "Amazonas", sigla: "AM" },
    { nome: "Bahia", sigla: "BA" },
    { nome: "Ceará", sigla: "CE" },
    { nome: "Distrito Federal", sigla: "DF" },
    { nome: "Espírito Santo", sigla: "ES" },
    { nome: "Goiás", sigla: "GO" },
    { nome: "Maranhão", sigla: "MA" },
    { nome: "Mato Grosso", sigla: "MT" },
    { nome: "Mato Grosso do Sul", sigla: "MS" },
    { nome: "Minas Gerais", sigla: "MG" },
    { nome: "Pará", sigla: "PA" },
    { nome: "Paraíba", sigla: "PB" },
    { nome: "Paraná", sigla: "PR" },
    { nome: "Pernambuco", sigla: "PE" },
    { nome: "Piauí", sigla: "PI" },
    { nome: "Rio de Janeiro", sigla: "RJ" },
    { nome: "Rio Grande do Norte", sigla: "RN" },
    { nome: "Rio Grande do Sul", sigla: "RS" },
    { nome: "Rondônia", sigla: "RO" },
    { nome: "Roraima", sigla: "RR" },
    { nome: "Santa Catarina", sigla: "SC" },
    { nome: "São Paulo", sigla: "SP" },
    { nome: "Sergipe", sigla: "SE" },
    { nome: "Tocantins", sigla: "TO" },
  ];

  const cadastraUsuario = useCallback(async (form: any) => {
    try {
      await api.post("/usuarios", form);
      onNotification("success", {
        message: "Ok!",
        description: "Usuário cadastrado com sucesso",
      });
      setModalRegistro(false);
      cadastro.resetFields();
    } catch (err) {
      console.log("erro");
      onNotification("error", {
        message: "Erro!",
        description: "Erro ao cadastrar usuário",
      });
      setModalRegistro(false);
    }
  }, []);

  const handleOk = (values) => {
    setModalRegistro(false);
    form.resetFields();
    console.log(values);
  };

  const handleCancel = () => {
    setModalRegistro(false);
    // form.resetFields();
  };

  const { Option } = Select;

  return (
    <>
      <Head>
        <title>Biblioteca Seap</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/seap-juris/logo.png" />
      </Head>

      <Header login={true} />
      <main className={styles.main}>
        <img
          width={150}
          src="/seap-juris/logo.svg"
          style={{
            marginBottom: "3rem",
          }}
        />
        <div className={styles.card}>
          <>
            <h1>Pré-Cadastro Advogado</h1>

            <Spin tip="Carregando..." spinning={false}>
              <Form
                form={form}
                layout="vertical"
                // onFinish={save}
                // validateMessages={validateMessages2}
              >
                <Row>
                  <Col span={7}>
                    <FormItem
                      name="cpf"
                      label="CPF"
                      // rules={CpfRequired}
                      hasFeedback
                    >
                      <MaskedInput mask="000.000.000-00" />
                    </FormItem>
                  </Col>
                  <Col span={17}>
                    <FormItem
                      name="nome"
                      label="Nome"
                      // // rules={required}
                      hasFeedback
                    >
                      <Input />
                    </FormItem>
                  </Col>
                </Row>
                <Row>
                  <Col span={17}>
                    <FormItem
                      name="email"
                      label="Email"
                      rules={[{ required: true }, { type: "email" }]}
                      hasFeedback
                    >
                      <Input />
                    </FormItem>
                  </Col>

                  <Col span={7}>
                    <FormItem
                      name="telefone"
                      label="Telefone"
                      // // rules={required}
                      hasFeedback
                    >
                      <MaskedInput mask="(00) 00000-0000" />
                    </FormItem>
                  </Col>
                </Row>
                <Row>
                  <Col span={7}>
                    <FormItem
                      name="oab"
                      label="OAB"
                      // rules={required}
                      hasFeedback
                    >
                      <Input />
                    </FormItem>
                  </Col>
                  <Col span={7}>
                    <FormItem
                      name="seccional"
                      label="Seccional"
                      // rules={required}
                      hasFeedback
                    >
                      <Select>
                        {Estado.map((sec) => (
                          <Option key={sec.sigla} value={sec.sigla}>
                            {sec?.sigla}
                          </Option>
                        ))}
                      </Select>
                    </FormItem>
                  </Col>
                </Row>
                <Button htmlType="submit" type="primary">
                  Salvar
                </Button>
              </Form>
            </Spin>
          </>
        </div>
      </main>

      <Footer />

      <Modal
        title="Pré Cadastro de Advogado"
        visible={modalregistro}
        onOk={handleOk}
        onCancel={handleCancel}
        width={600}
        footer={[]}
      >
        <Form
          layout="vertical"
          name="cadastro"
          form={cadastro}
          labelCol={{ span: 10 }}
          wrapperCol={{ span: 24 }}
          initialValues={{ remember: true }}
          onFinish={cadastraUsuario}
          // onFinishFailed={onFinishFailed}
          autoComplete="off"
        >
          <Form.Item
            label="Nome"
            name="nome"
            rules={[{ required: true, message: "Informe seu nome!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Login"
            name="login"
            rules={[{ required: true, message: "Informe seu login!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Senha"
            name="senha"
            rules={[{ required: true, message: "Informe sua senha!" }]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            label="Perfil"
            name="perfil"
            rules={[{ required: true, message: "Informe seu perfil!" }]}
          >
            <Select
            // defaultValue="usuario"
            // style={{ width: 120 }}
            // onChange={handleChange}
            >
              <Option value="usuario">Usuario</Option>
              <Option value="administrador">Administrador</Option>
            </Select>
          </Form.Item>

          <Form.Item
          // wrapperCol={{ offset: 8, span: 16 }}
          >
            <Button
              // type="primary"
              htmlType="submit"
              style={{
                background: "#04d361",
                color: "#fff",
                width: "100%",
                marginBottom: -50,
              }}
            >
              Cadastrar
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}
