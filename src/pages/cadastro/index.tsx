/* eslint-disable @next/next/no-img-element */
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { api } from "../../../services/api";

import styles from "../../styles/Cadastro.module.scss";
import "antd/dist/antd.css";
import Link from "next/link";
import Footer from "../../components/Footer";
import Head from "next/head";
import onNotification from "../../components/Notificacao/Notificacao";
import { Spin, Form, Row, Col, Input, Upload, Button } from "antd";
import {
  LoadingOutlined,
  PlusOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import FormItem from "antd/lib/form/FormItem";

import { Menu } from "../../components/Menu";

const { TextArea } = Input;

const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;

// type Livro = {
//   id: number;
//   titulo: string;
//   descricao: string;
//   dataCadastro: string;
//   locado: string;
//   url: string;
// };

function getBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });
}

type Livros = {
  id: number;
  titulo: string;
  sub: string;
  descricao: string;
  dataCadastro: string;
  dataRetirada: string;
  locado: string;
  file: {
    url: string;
  };
};

// type LivroProps = {
//   livro: Livro;
// };

const handleOk = (values) => {};

export default function CadastrarLivro() {
  const [loading, setLoading] = useState(false);
  const [livros, setLivros] = useState([]);

  const [form] = Form.useForm();

  useEffect(() => {
    buscaLivros();
  }, []);

  const buscaLivros = async () => {
    try {
      setLoading(true);
      const response = await api.get("livros", {
        params: {
          _limit: 10,
          _sort: "dataRetirada",
          _order: "desc",
        },
      });

      setLivros(response.data);

      setLoading(false);
    } catch (err) {
      setLoading(false);
      onNotification("error", {
        message: "Erro!",
        description: "Erro ao buscar locações.",
      });
    }
  };

  // const router = useRouter();

  return (
    <div className={styles.container}>
      <Head>
        <title>Biblioteca Seap</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <div className={styles.wrapper}>
        <Menu />
        <main>
          <div className={styles.homepage}>
            <h2>Cadastrar Livro</h2>
            <Spin indicator={antIcon} spinning={loading}>
              <section className={styles.livrosRecentes}>
                <Form
                  // {...formItemLayout}
                  layout="vertical"
                  form={form}
                  name="cadastro"
                  onFinish={handleOk}
                  // initialValues={{ layout: formLayout }}
                  // onValuesChange={onFormLayoutChange}
                >
                  <Row gutter={8}>
                    <Col xs={12} sm={10} md={8}>
                      {/* <label></label> */}
                      <FormItem
                        name="foto"
                        colon={false}
                        required
                        // rules={required}
                        hasFeedback
                        label="Foto"
                      >
                        <Upload>
                          <Button icon={<UploadOutlined />}>
                            Enviar Imagem
                          </Button>
                        </Upload>
                      </FormItem>
                    </Col>
                  </Row>

                  <Row gutter={8}>
                    <Col xs={24} sm={12} md={12}>
                      <FormItem
                        name="titulo"
                        colon={false}
                        required
                        hasFeedback
                        label="Titulo"
                      >
                        <Input placeholder="Titulo" />
                      </FormItem>
                    </Col>
                    <Col xs={24} sm={12} md={12}>
                      <FormItem
                        name="subtitulo"
                        required
                        hasFeedback
                        label="Subtitulo"
                      >
                        <Input placeholder="Subtitulo" />
                      </FormItem>
                    </Col>
                  </Row>
                  <Row gutter={8}>
                    <Col xs={24} sm={24} md={24}>
                      <FormItem
                        name="descricao"
                        required
                        hasFeedback
                        label="Descrição"
                      >
                        <TextArea placeholder="Descrição" rows={6} />
                      </FormItem>
                    </Col>
                  </Row>

                  <Button
                    type="primary"
                    htmlType="submit"
                    style={{ background: "#04d361" }}
                    // loading={buttonLoad}
                    onClick={() => form.resetFields()}
                  >
                    Salvar
                  </Button>
                </Form>
              </section>
            </Spin>
          </div>
          <Footer />
        </main>
      </div>
    </div>
  );
}
